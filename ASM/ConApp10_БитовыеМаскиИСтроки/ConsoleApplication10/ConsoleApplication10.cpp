// ConsoleApplication10.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
////////////////////////////////////////////////////////////////////////////////////
#include <string>
//using namespace std;
std::string show_bits(int a)
{//Получение строкового побитового представления числа
    std::string _ResStr = "";
    int size = 4 * sizeof(int);
    int mask = 1 << size;
    for (int i = 0; i <= size; ++i)
    {
        //Сокращенное ветвление через проверку операцией и с о старшим разрядом числа (маски)
        //Все что больше или равно 1 то есть истина, на этом играет этот прием
        _ResStr += (a & mask ? '1' : '0');
        ;
        a<<= 1;
        //std::cout << "20201019_1324"<<"i="<<i<<";a="<<a << "\n";
    }
    return _ResStr;
}
void _test1 ()
{
    try
    {
        throw "HelloWorld";
    }
    catch (const char* exception)
    {
        std::cerr << "Error:20201022_0954: " << exception << '\n';
        throw "HelloWorld";
    }
}
void _test2()
{
    if (!false)
    {
        //Дело вот в чем//Есть команда, которой получаем побитовое представление числа для вывода на экран
        //В основном используется при изучении сдвигов
        //Побитовое забивание числа
        int i = 0b10010010101;
        /*
        int i = 10010010101;
        int i = 0xffffaa;
        */
        std::cout << show_bits(i) << "\n";
        //Сдвиг на один в лево
        i <<= 1;
        std::cout << show_bits(i) << "\n";
        //Сдвиг на два в право
        i >>= 2;
        std::cout << show_bits(i) << "\n";
    }
    else if (false)
    {
        //Альтернативный способ применения сего
        std::cout << show_bits(0b101010) << "\n";
        std::cout << show_bits(0b101010 << 1) << "\n";
        std::cout << show_bits(0b101010 >> 1) << "\n";
    }
    else if (false)
    {
        //Альтернативный способ применения сего
        int i = 0b101010;
        std::cout << show_bits(i) << "\n";
        std::cout << show_bits(i << 1) << "\n";
        std::cout << show_bits(i) << "\n";
    }
    else if (false)
    {
        //Альтернативный способ применения сего
        for (int i = 0;i < 18;i++)
            std::cout << "var <<" << i << " " << show_bits(0b101010 << i) << "\n";
        //Результат сдвига, он логический
    }
    ////////////////////////////////////////////////////////////
    ////Теперь будем компостировать битовые флаги переменных////
    ////////////////////////////////////////////////////////////
    else if (false)
    {
        int i = 0;
        i = i | 0b00000010;
        i = i | 0b00100000;
        if (i & 0b00000010)std::cout << "0b00000010" << "BitFlag is ON" << "\n";
        if (i & 0b00000001) {}
        else std::cout << "0b00000001" << "BitFlag is OFF" << "\n";
    }
    else if (!false)
    {

    }
}
////////////////////////////////////////////////////////////////////////////////////
int main()
{
    _test2();
    int i = 0b10010010101;
    std::string _str = "";
    /*
    __asm {
        push        offset string "" (0AD0DCBh)
        lea         ecx, [_str]
        call        std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char, std::char_traits<char>, std::allocator<char> >(0AC106Eh)
        mov         dword ptr[ebp - 4], 0
    }
    */
    //_str = show_bits(i);
    //std::cout << show_bits(i) << "\n";
    system("Pause");
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
